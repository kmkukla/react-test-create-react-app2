{"version":3,"sources":["UsersList.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","users","length","map","user","key","allUsers","App","filterUsers","e","a","text","target","value","this","getFilteredUsersForText","filteredUsers","setState","state","Promise","resolve","time","Math","random","setTimeout","filter","toLowerCase","includes","onInput","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAQeA,MANf,YAA+B,IAAVC,EAAS,EAATA,MACnB,OAAIA,EAAMC,OACDD,EAAME,KAAI,SAACC,GAAD,OAAU,wBAAIC,IAAKD,GAAOA,MAC/B,eCDVE,EAAW,CACf,SACA,YACA,WACA,SACA,OACA,WACA,YACA,eACA,QACA,UAwCaC,E,kDApCb,aAAe,IAAD,8BACZ,gBAKFC,YANc,uCAMA,WAAgBC,GAAhB,iBAAAC,EAAA,6DACNC,EAAOF,EAAEG,OAAOC,MADV,SAEgBC,KAAKC,wBAAwBJ,GAF7C,OAENK,EAFM,OAGZF,KAAKG,SAAS,CACZD,kBAJU,gDANA,sDAEZ,EAAKE,MAAQ,CACXF,cAAeV,GAHL,E,oEAcUK,GACtB,OAAO,IAAIQ,SAAQ,SAACC,GAClB,IAAMC,EAA6B,KAArBC,KAAKC,SAAW,GAC9BC,YAAW,WACT,IAAMR,EAAgBV,EAASmB,QAAO,SAACrB,GAAD,OACpCA,EAAKsB,cAAcC,SAAShB,EAAKe,kBAEnCN,EAAQJ,KACPK,Q,+BAIG,IAAD,OACP,OACE,6BACE,2BAAOO,QAAS,SAACnB,GAAD,OAAO,EAAKD,YAAYC,MACxC,kBAAC,EAAD,CAAWR,MAAOa,KAAKI,MAAMF,qB,GA/BnBa,IAAMC,WCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.25ff4f6b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction UsersList({ users }) {\r\n  if (users.length) {\r\n    return users.map((user) => <li key={user}>{user}</li>);\r\n  } else return \"No results!\";\r\n}\r\n\r\nexport default UsersList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport UsersList from \"./UsersList\";\n\nconst allUsers = [\n  \"Marcin\",\n  \"Katarzyna\",\n  \"Grzegorz\",\n  \"Tomasz\",\n  \"Anna\",\n  \"Dominika\",\n  \"Agnieszka\",\n  \"WiesÅ‚aw\",\n  \"Kamil\",\n  \"Bogdan\",\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filteredUsers: allUsers,\n    };\n  }\n  filterUsers = async function (e) {\n    const text = e.target.value;\n    const filteredUsers = await this.getFilteredUsersForText(text);\n    this.setState({\n      filteredUsers,\n    });\n  };\n\n  getFilteredUsersForText(text) {\n    return new Promise((resolve) => {\n      const time = (Math.random() + 1) * 250;\n      setTimeout(() => {\n        const filteredUsers = allUsers.filter((user) =>\n          user.toLowerCase().includes(text.toLowerCase())\n        );\n        resolve(filteredUsers);\n      }, time);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input onInput={(e) => this.filterUsers(e)} />\n        <UsersList users={this.state.filteredUsers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}